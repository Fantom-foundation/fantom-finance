"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _ink = require("ink");

var _isTty = _interopRequireDefault(require("../../../util/is-tty"));

var _gatsbyTelemetry = require("gatsby-telemetry");

var _spinner = _interopRequireDefault(require("../ink/components/spinner"));

var _progressBar = _interopRequireDefault(require("../ink/components/progress-bar"));

var _messages = require("../ink/components/messages");

var _error = _interopRequireDefault(require("./components/error"));

var _develop = _interopRequireDefault(require("../ink/components/develop"));

const showProgress = (0, _isTty.default)();

class CLI extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      hasError: false
    });
  }

  componentDidCatch(error, info) {
    (0, _gatsbyTelemetry.trackBuildError)(`INK`, {
      error: {
        stack: info.componentStack,
        text: error.message,
        context: {}
      }
    });
  }

  static getDerivedStateFromError(error) {
    return {
      hasError: true,
      error
    };
  }

  render() {
    const _this$props = this.props,
          _this$props$logs = _this$props.logs,
          messages = _this$props$logs.messages,
          activities = _this$props$logs.activities,
          showStatusBar = _this$props.showStatusBar;
    const _this$state = this.state,
          hasError = _this$state.hasError,
          error = _this$state.error;

    if (hasError) {
      // You can render any custom fallback UI
      return _react.default.createElement(_ink.Box, {
        flexDirection: "row"
      }, _react.default.createElement(_messages.Message, {
        level: "ACTIVITY_FAILED",
        text: `We've encountered an error: ${error.message}`
      }));
    }

    const spinners = [];
    const progressBars = [];

    if (showProgress) {
      Object.keys(activities).forEach(activityName => {
        const activity = activities[activityName];

        if (activity.status !== `IN_PROGRESS`) {
          return;
        }

        if (activity.type === `spinner`) {
          spinners.push(activity);
        }

        if (activity.type === `progress` && activity.startTime) {
          progressBars.push(activity);
        }
      });
    }

    return _react.default.createElement(_ink.Box, {
      flexDirection: "column"
    }, _react.default.createElement(_ink.Box, {
      flexDirection: "column"
    }, _react.default.createElement(_ink.Static, null, messages.map((msg, index) => msg.level === `ERROR` ? _react.default.createElement(_error.default, {
      details: msg,
      key: index
    }) : _react.default.createElement(_messages.Message, (0, _extends2.default)({
      key: index
    }, msg)))), spinners.map(activity => _react.default.createElement(_spinner.default, (0, _extends2.default)({
      key: activity.id
    }, activity))), progressBars.map(activity => _react.default.createElement(_progressBar.default, {
      key: activity.id,
      message: activity.text,
      total: activity.total,
      current: activity.current,
      startTime: activity.startTime
    }))), showStatusBar && _react.default.createElement(_develop.default, null));
  }

}

var _default = CLI;
exports.default = _default;