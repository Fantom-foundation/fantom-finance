"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

const Joi = require(`@hapi/joi`);

const stackTrace = require(`stack-trace`);

const errorSchema = require(`./error-schema`);

const _require = require(`./error-map`),
      errorMap = _require.errorMap,
      defaultError = _require.defaultError;

const _require2 = require(`../reporter/errors`),
      sanitizeStructuredStackTrace = _require2.sanitizeStructuredStackTrace; // Merge partial error details with information from the errorMap
// Validate the constructed object against an error schema
// TODO: 'details' is not a descriptive name


const constructError = (_ref) => {
  let _ref$details = _ref.details,
      id = _ref$details.id,
      otherDetails = (0, _objectWithoutPropertiesLoose2.default)(_ref$details, ["id"]);
  const result = id && errorMap[id] || defaultError; // merge

  const structuredError = Object.assign({
    context: {}
  }, otherDetails, {}, result, {
    text: result.text(otherDetails.context),
    stack: otherDetails.error ? sanitizeStructuredStackTrace(stackTrace.parse(otherDetails.error)) : null,
    docsUrl: result.docsUrl || `https://gatsby.dev/issue-how-to`
  });

  if (id) {
    structuredError.code = id;
  } // validate


  const _Joi$validate = Joi.validate(structuredError, errorSchema),
        error = _Joi$validate.error;

  if (error !== null) {
    console.log(`Failed to validate error`, error);
    process.exit(1);
  }

  return structuredError;
};

module.exports = constructError;