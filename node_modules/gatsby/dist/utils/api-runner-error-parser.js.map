{"version":3,"sources":["../../src/utils/api-runner-error-parser.js"],"names":["errorParser","err","handlers","regex","cb","match","id","context","message","arg","Error","error","undefined","structured","Array","isArray","matched"],"mappings":";;;;;AAAA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAC/B,QAAMC,QAAQ,GAAG,CACf;AACEC,IAAAA,KAAK,EAAE,sBADT;AAEEC,IAAAA,EAAE,EAAEC,KAAK,IAAI;AACX,aAAO;AACLC,QAAAA,EAAE,EAAG,OADA;AAELC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAEH,KAAK,CAAC,CAAD,CAAhB;AAAqBI,UAAAA,GAAG,EAAEJ,KAAK,CAAC,CAAD;AAA/B;AAFJ,OAAP;AAID;AAPH,GADe,EAUf;AACA;AACEF,IAAAA,KAAK,EAAE,WADT;AAEEC,IAAAA,EAAE,EAAEC,KAAK,IAAI;AACX,aAAO;AACLC,QAAAA,EAAE,EAAG,OADA;AAELC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAEP,GAAG,YAAYS,KAAf,GAAuBL,KAAK,CAAC,CAAD,CAA5B,GAAkCJ;AAA7C,SAFJ;AAGLU,QAAAA,KAAK,EAAEV,GAAG,YAAYS,KAAf,GAAuBT,GAAvB,GAA6BW;AAH/B,OAAP;AAKD;AARH,GAXe,CAAjB;AAuBA,MAAIC,UAAJ;;AAEA,OAAK,MAAM;AAAEV,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAX,IAA4BF,QAA5B,EAAsC;AAAA;;AACpC,QAAIY,KAAK,CAACC,OAAN,CAAcd,GAAd,CAAJ,EAAwB;AACtBA,MAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT;AACD;;AACD,UAAMe,OAAO,mBAAGf,GAAG,CAACO,OAAP,iDAAG,aAAaH,KAAb,CAAmBF,KAAnB,CAAhB;;AACA,QAAIa,OAAJ,EAAa;AACXH,MAAAA,UAAU,qBACLT,EAAE,CAACY,OAAD,CADG,CAAV;AAGA;AACD;AACF;;AAED,SAAOH,UAAP;AACD,CAxCD;;eA0Ceb,W","sourcesContent":["const errorParser = ({ err }) => {\n  const handlers = [\n    {\n      regex: /(.+) is not defined/m,\n      cb: match => {\n        return {\n          id: `11330`,\n          context: { message: match[0], arg: match[1] },\n        }\n      },\n    },\n    // Match anything with a generic catch-all error handler\n    {\n      regex: /[\\s\\S]*/gm,\n      cb: match => {\n        return {\n          id: `11321`,\n          context: { message: err instanceof Error ? match[0] : err },\n          error: err instanceof Error ? err : undefined,\n        }\n      },\n    },\n  ]\n\n  let structured\n\n  for (const { regex, cb } of handlers) {\n    if (Array.isArray(err)) {\n      err = err[0]\n    }\n    const matched = err.message?.match(regex)\n    if (matched) {\n      structured = {\n        ...cb(matched),\n      }\n      break\n    }\n  }\n\n  return structured\n}\n\nexport default errorParser\n"],"file":"api-runner-error-parser.js"}