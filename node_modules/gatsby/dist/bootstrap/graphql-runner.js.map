{"version":3,"sources":["../../src/bootstrap/graphql-runner.js"],"names":["stackTrace","require","GraphQLRunner","errorParser","default","module","exports","store","reporter","runner","query","context","then","result","errors","structuredErrors","map","e","file","parse","find","test","functionName","structuredError","message","location","start","line","lineNumber","column","columnNumber","filePath","fileName","fromGraphQLFunction","filter","Boolean","length","panicOnBuild"],"mappings":";;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAE,aAAF,CAA1B;;AAEA,MAAMC,aAAa,GAAGD,OAAO,CAAE,yBAAF,CAA7B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAE,uBAAF,CAAP,CAAiCG,OAArD;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACpC,QAAMC,MAAM,GAAG,IAAIP,aAAJ,CAAkBK,KAAlB,CAAf;AACA,SAAO,CAACG,KAAD,EAAQC,OAAR,KACLF,MAAM,CAACC,KAAP,CAAaA,KAAb,EAAoBC,OAApB,EAA6BC,IAA7B,CAAkCC,MAAM,IAAI;AAC1C,QAAIA,MAAM,CAACC,MAAX,EAAmB;AACjB,YAAMC,gBAAgB,GAAGF,MAAM,CAACC,MAAP,CACtBE,GADsB,CAClBC,CAAC,IAAI;AACR;AACA,cAAMC,IAAI,GAAGlB,UAAU,CACpBmB,KADU,CACJF,CADI,EAEVG,IAFU,CAELF,IAAI,IAAI,cAAcG,IAAd,CAAmBH,IAAI,CAACI,YAAxB,CAFH,CAAb;;AAIA,YAAIJ,IAAJ,EAAU;AACR,gBAAMK,eAAe,GAAGpB,WAAW,CAAC;AAClCqB,YAAAA,OAAO,EAAEP,CAAC,CAACO,OADuB;AAElCC,YAAAA,QAAQ,EAAE;AACRC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,IAAI,EAAET,IAAI,CAACU,UAAb;AAAyBC,gBAAAA,MAAM,EAAEX,IAAI,CAACY;AAAtC;AADC,aAFwB;AAKlCC,YAAAA,QAAQ,EAAEb,IAAI,CAACc;AALmB,WAAD,CAAnC;AAOAT,UAAAA,eAAe,CAACZ,OAAhB,qBACKY,eAAe,CAACZ,OADrB;AAEEsB,YAAAA,mBAAmB,EAAE;AAFvB;AAIA,iBAAOV,eAAP;AACD;;AAED,eAAO,IAAP;AACD,OAvBsB,EAwBtBW,MAxBsB,CAwBfC,OAxBe,CAAzB;;AA0BA,UAAIpB,gBAAgB,CAACqB,MAArB,EAA6B;AAC3B;AACA5B,QAAAA,QAAQ,CAAC6B,YAAT,CAAsBtB,gBAAtB;AACD;AACF;;AAED,WAAOF,MAAP;AACD,GAnCD,CADF;AAqCD,CAvCD","sourcesContent":["const stackTrace = require(`stack-trace`)\n\nconst GraphQLRunner = require(`../query/graphql-runner`)\nconst errorParser = require(`../query/error-parser`).default\n\nmodule.exports = (store, reporter) => {\n  const runner = new GraphQLRunner(store)\n  return (query, context) =>\n    runner.query(query, context).then(result => {\n      if (result.errors) {\n        const structuredErrors = result.errors\n          .map(e => {\n            // Find the file where graphql was called.\n            const file = stackTrace\n              .parse(e)\n              .find(file => /createPages/.test(file.functionName))\n\n            if (file) {\n              const structuredError = errorParser({\n                message: e.message,\n                location: {\n                  start: { line: file.lineNumber, column: file.columnNumber },\n                },\n                filePath: file.fileName,\n              })\n              structuredError.context = {\n                ...structuredError.context,\n                fromGraphQLFunction: true,\n              }\n              return structuredError\n            }\n\n            return null\n          })\n          .filter(Boolean)\n\n        if (structuredErrors.length) {\n          // panic on build exits the process\n          reporter.panicOnBuild(structuredErrors)\n        }\n      }\n\n      return result\n    })\n}\n"],"file":"graphql-runner.js"}