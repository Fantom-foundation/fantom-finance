{"version":3,"sources":["../../src/bootstrap/schema-hot-reloader.js"],"names":["debounce","cloneDeep","require","emitter","store","rebuild","haveEqualFields","updateStateAndRunQueries","report","inferredTypesChanged","typeMap","prevTypeMap","Object","keys","some","type","dirty","schemaChanged","schemaCustomization","lastSchemaCustomization","key","lastMetadata","maybeRebuildSchema","inferenceMetadata","getState","activity","activityTimer","start","parentSpan","end","module","exports","on"],"mappings":";;AAAA,MAAM;AAAEA,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAA0BC,OAAO,CAAE,QAAF,CAAvC;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAqBF,OAAO,CAAE,UAAF,CAAlC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAcH,OAAO,CAAE,WAAF,CAA3B;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAsBJ,OAAO,CAAE,oCAAF,CAAnC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAA+BL,OAAO,CAAE,wBAAF,CAA5C;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAE,yBAAF,CAAtB;;AAEA,MAAMO,oBAAoB,GAAG,CAACC,OAAD,EAAUC,WAAV,KAC3BC,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,IAArB,CACEC,IAAI,IACFL,OAAO,CAACK,IAAD,CAAP,CAAcC,KAAd,IAAuB,CAACV,eAAe,CAACI,OAAO,CAACK,IAAD,CAAR,EAAgBJ,WAAW,CAACI,IAAD,CAA3B,CAF3C,CADF;;AAMA,MAAME,aAAa,GAAG,CAACC,mBAAD,EAAsBC,uBAAtB,KACpB,CAAE,iBAAF,EAAqB,aAArB,EAAoC,mBAApC,EAAyD,OAAzD,EAAiEL,IAAjE,CACEM,GAAG,IAAIF,mBAAmB,CAACE,GAAD,CAAnB,KAA6BD,uBAAuB,CAACC,GAAD,CAD7D,CADF;;AAKA,IAAIC,YAAJ;AACA,IAAIF,uBAAJ,C,CAEA;AACA;;AACA,MAAMG,kBAAkB,GAAGtB,QAAQ,CAAC,YAAY;AAC9C,QAAM;AAAEuB,IAAAA,iBAAF;AAAqBL,IAAAA;AAArB,MAA6Cd,KAAK,CAACoB,QAAN,EAAnD;;AAEA,MACE,CAACf,oBAAoB,CAACc,iBAAiB,CAACb,OAAnB,EAA4BW,YAAY,CAACX,OAAzC,CAArB,IACA,CAACO,aAAa,CAACC,mBAAD,EAAsBC,uBAAtB,CAFhB,EAGE;AACA;AACD;;AAED,QAAMM,QAAQ,GAAGjB,MAAM,CAACkB,aAAP,CAAsB,gBAAtB,CAAjB;AACAD,EAAAA,QAAQ,CAACE,KAAT;AACAN,EAAAA,YAAY,GAAGpB,SAAS,CAACsB,iBAAD,CAAxB;AACAJ,EAAAA,uBAAuB,GAAGD,mBAA1B;AACA,QAAMb,OAAO,CAAC;AAAEuB,IAAAA,UAAU,EAAEH;AAAd,GAAD,CAAb;AACA,QAAMlB,wBAAwB,CAAC,KAAD,EAAQ;AAAEqB,IAAAA,UAAU,EAAEH;AAAd,GAAR,CAA9B;AACAA,EAAAA,QAAQ,CAACI,GAAT;AACD,CAjBkC,EAiBhC,IAjBgC,CAAnC;;AAmBAC,MAAM,CAACC,OAAP,GAAiB,MAAM;AACrB,QAAM;AAAER,IAAAA,iBAAF;AAAqBL,IAAAA;AAArB,MAA6Cd,KAAK,CAACoB,QAAN,EAAnD;AACAH,EAAAA,YAAY,GAAGpB,SAAS,CAACsB,iBAAD,CAAxB;AACAJ,EAAAA,uBAAuB,GAAGD,mBAA1B;AACAf,EAAAA,OAAO,CAAC6B,EAAR,CAAY,yBAAZ,EAAsCV,kBAAtC;AACD,CALD","sourcesContent":["const { debounce, cloneDeep } = require(`lodash`)\nconst { emitter, store } = require(`../redux`)\nconst { rebuild } = require(`../schema`)\nconst { haveEqualFields } = require(`../schema/infer/inference-metadata`)\nconst { updateStateAndRunQueries } = require(`../query/query-watcher`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst inferredTypesChanged = (typeMap, prevTypeMap) =>\n  Object.keys(typeMap).some(\n    type =>\n      typeMap[type].dirty && !haveEqualFields(typeMap[type], prevTypeMap[type])\n  )\n\nconst schemaChanged = (schemaCustomization, lastSchemaCustomization) =>\n  [`fieldExtensions`, `printConfig`, `thirdPartySchemas`, `types`].some(\n    key => schemaCustomization[key] !== lastSchemaCustomization[key]\n  )\n\nlet lastMetadata\nlet lastSchemaCustomization\n\n// API_RUNNING_QUEUE_EMPTY could be emitted multiple types\n// in a short period of time, so debounce seems reasonable\nconst maybeRebuildSchema = debounce(async () => {\n  const { inferenceMetadata, schemaCustomization } = store.getState()\n\n  if (\n    !inferredTypesChanged(inferenceMetadata.typeMap, lastMetadata.typeMap) &&\n    !schemaChanged(schemaCustomization, lastSchemaCustomization)\n  ) {\n    return\n  }\n\n  const activity = report.activityTimer(`rebuild schema`)\n  activity.start()\n  lastMetadata = cloneDeep(inferenceMetadata)\n  lastSchemaCustomization = schemaCustomization\n  await rebuild({ parentSpan: activity })\n  await updateStateAndRunQueries(false, { parentSpan: activity })\n  activity.end()\n}, 1000)\n\nmodule.exports = () => {\n  const { inferenceMetadata, schemaCustomization } = store.getState()\n  lastMetadata = cloneDeep(inferenceMetadata)\n  lastSchemaCustomization = schemaCustomization\n  emitter.on(`API_RUNNING_QUEUE_EMPTY`, maybeRebuildSchema)\n}\n"],"file":"schema-hot-reloader.js"}