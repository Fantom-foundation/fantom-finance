{"version":3,"sources":["../../../src/db/common/query.js"],"names":["_","require","toDottedFields","filter","acc","path","Object","keys","forEach","key","value","nextValue","isPlainObject","join","concat","objectToDottedField","obj","result","pathResult","liftResolvedFields","args","resolvedFields","dottedFields","dottedFieldKeys","finalArgs","some","dottedKey","startsWith","$elemMatch","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\n\n// Converts a nested mongo args object into a dotted notation. acc\n// (accumulator) must be a reference to an empty object. The converted\n// fields will be added to it. E.g\n//\n// {\n//   internal: {\n//     type: {\n//       $eq: \"TestNode\"\n//     },\n//     content: {\n//       $regex: new MiniMatch(v)\n//     }\n//   },\n//   id: {\n//     $regex: newMiniMatch(v)\n//   }\n// }\n//\n// After execution, acc would be:\n//\n// {\n//   \"internal.type\": {\n//     $eq: \"TestNode\"\n//   },\n//   \"internal.content\": {\n//     $regex: new MiniMatch(v)\n//   },\n//   \"id\": {\n//     $regex: // as above\n//   }\n// }\nconst toDottedFields = (filter, acc = {}, path = []) => {\n  Object.keys(filter).forEach(key => {\n    const value = filter[key]\n    const nextValue = _.isPlainObject(value) && value[Object.keys(value)[0]]\n    if (key === `$elemMatch`) {\n      acc[path.join(`.`)] = { [`$elemMatch`]: toDottedFields(value) }\n    } else if (_.isPlainObject(nextValue)) {\n      toDottedFields(value, acc, path.concat(key))\n    } else {\n      acc[path.concat(key).join(`.`)] = value\n    }\n  })\n  return acc\n}\n\n// Like above, but doesn't handle $elemMatch\nconst objectToDottedField = (obj, path = []) => {\n  let result = {}\n  Object.keys(obj).forEach(key => {\n    const value = obj[key]\n    if (_.isPlainObject(value)) {\n      const pathResult = objectToDottedField(value, path.concat(key))\n      result = {\n        ...result,\n        ...pathResult,\n      }\n    } else {\n      result[path.concat(key).join(`.`)] = value\n    }\n  })\n  return result\n}\n\nconst liftResolvedFields = (args, resolvedFields) => {\n  const dottedFields = objectToDottedField(resolvedFields)\n  const dottedFieldKeys = Object.keys(dottedFields)\n  const finalArgs = {}\n  Object.keys(args).forEach(key => {\n    const value = args[key]\n    if (dottedFields[key]) {\n      finalArgs[`__gatsby_resolved.${key}`] = value\n    } else if (\n      dottedFieldKeys.some(dottedKey => dottedKey.startsWith(key)) &&\n      value.$elemMatch\n    ) {\n      finalArgs[`__gatsby_resolved.${key}`] = value\n    } else if (dottedFieldKeys.some(dottedKey => key.startsWith(dottedKey))) {\n      finalArgs[`__gatsby_resolved.${key}`] = value\n    } else {\n      finalArgs[key] = value\n    }\n  })\n  return finalArgs\n}\n\nmodule.exports = {\n  toDottedFields,\n  objectToDottedField,\n  liftResolvedFields,\n}\n"],"file":"query.js"}