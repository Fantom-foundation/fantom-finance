{"version":3,"sources":["../../src/redux/index.ts"],"names":["emitter","readState","state","nodes","nodesByType","Map","forEach","node","type","internal","has","set","get","id","e","multi","dispatch","next","action","Array","isArray","filter","Boolean","map","configureStore","initialState","reducers","thunk","store","saveState","getState","pickedState","_","pick","subscribe","lastAction","emit"],"mappings":";;;;;;;AAAA;;AAOA;;AAEA;;AACA;;AACA;;AACA;;AAIO,MAAMA,OAAO,GAAG,oBAAhB,C,CAEP;;;;AACO,MAAMC,SAAS,GAAG,MAAmB;AAC1C,MAAI;AACF,UAAMC,KAAK,GAAG,6BAAd;;AACA,QAAIA,KAAK,CAACC,KAAV,EAAiB;AACf;AACAD,MAAAA,KAAK,CAACE,WAAN,GAAoB,IAAIC,GAAJ,EAApB;AACAH,MAAAA,KAAK,CAACC,KAAN,CAAYG,OAAZ,CAAoBC,IAAI,IAAI;AAC1B,cAAM;AAAEC,UAAAA;AAAF,YAAWD,IAAI,CAACE,QAAtB;;AACA,YAAI,CAACP,KAAK,CAACE,WAAN,CAAkBM,GAAlB,CAAsBF,IAAtB,CAAL,EAAkC;AAChCN,UAAAA,KAAK,CAACE,WAAN,CAAkBO,GAAlB,CAAsBH,IAAtB,EAA4B,IAAIH,GAAJ,EAA5B;AACD;;AACDH,QAAAA,KAAK,CAACE,WAAN,CAAkBQ,GAAlB,CAAsBJ,IAAtB,EAA4BG,GAA5B,CAAgCJ,IAAI,CAACM,EAArC,EAAyCN,IAAzC;AACD,OAND;AAOD,KAZC,CAcF;AACA;AACA;;;AACA,WAAOL,KAAK,CAAE,eAAF,CAAZ;AACA,WAAOA,KAAP;AACD,GAnBD,CAmBE,OAAOY,CAAP,EAAU,CAEX,CAFC,CACA;AAEF;AACA;;;AACA,SAAO,EAAP;AACD,CA1BM;AA4BP;;;;;;;AAGA,MAAMC,KAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBC,IAAI,IAC9CC,MADkD,IAGlDC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwBA,MAAM,CAACG,MAAP,CAAcC,OAAd,EAAuBC,GAAvB,CAA2BP,QAA3B,CAAxB,GAA+DC,IAAI,CAACC,MAAD,CAHrE;;AAKO,MAAMM,cAAc,GAAIC,YAAD,IAC5B,wBACE,8CAAqBC,iBAArB,EADF,EAEED,YAFF,EAGE,4BAAgBE,mBAAhB,EAAuBZ,KAAvB,CAHF,CADK;;;AAOA,MAAMa,KAAK,GAAGJ,cAAc,CAACvB,SAAS,EAAV,CAA5B,C,CAEP;;;;AACO,MAAM4B,SAAS,GAAG,MAAY;AACnC,QAAM3B,KAAK,GAAG0B,KAAK,CAACE,QAAN,EAAd;;AACA,QAAMC,WAAW,GAAGC,gBAAEC,IAAF,CAAO/B,KAAP,EAAc,CAC/B,OAD+B,EAE/B,QAF+B,EAG/B,2BAH+B,EAI/B,YAJ+B,EAK/B,QAL+B,EAM/B,uBAN+B,EAO/B,wBAP+B,EAQ/B,eAR+B,CAAd,CAApB;;AAWA,SAAO,2BAAa6B,WAAb,CAAP;AACD,CAdM;;;AAgBPH,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpB,QAAMC,UAAU,GAAGP,KAAK,CAACE,QAAN,GAAiBK,UAApC;AACAnC,EAAAA,OAAO,CAACoC,IAAR,CAAaD,UAAU,CAAC3B,IAAxB,EAA8B2B,UAA9B;AACD,CAHD","sourcesContent":["import {\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  Store,\n  Middleware,\n} from \"redux\"\nimport _ from \"lodash\"\n\nimport mitt from \"mitt\"\nimport thunk from \"redux-thunk\"\nimport reducers from \"./reducers\"\nimport { writeToCache, readFromCache } from \"./persist\"\nimport { IReduxState, ActionsUnion } from \"./types\"\n\n// Create event emitter for actions\nexport const emitter = mitt()\n\n// Read old node data from cache.\nexport const readState = (): IReduxState => {\n  try {\n    const state = readFromCache()\n    if (state.nodes) {\n      // re-create nodesByType\n      state.nodesByType = new Map()\n      state.nodes.forEach(node => {\n        const { type } = node.internal\n        if (!state.nodesByType.has(type)) {\n          state.nodesByType.set(type, new Map())\n        }\n        state.nodesByType.get(type).set(node.id, node)\n      })\n    }\n\n    // jsonDataPaths was removed in the per-page-manifest\n    // changes. Explicitly delete it here to cover case where user\n    // runs gatsby the first time after upgrading.\n    delete state[`jsonDataPaths`]\n    return state\n  } catch (e) {\n    // ignore errors.\n  }\n  // BUG: Would this not cause downstream bugs? seems likely. Why wouldn't we just\n  // throw and kill the program?\n  return {} as IReduxState\n}\n\n/**\n * Redux middleware handling array of actions\n */\nconst multi: Middleware = ({ dispatch }) => next => (\n  action: ActionsUnion\n): ActionsUnion | ActionsUnion[] =>\n  Array.isArray(action) ? action.filter(Boolean).map(dispatch) : next(action)\n\nexport const configureStore = (initialState: IReduxState): Store<IReduxState> =>\n  createStore(\n    combineReducers({ ...reducers }),\n    initialState,\n    applyMiddleware(thunk, multi)\n  )\n\nexport const store = configureStore(readState())\n\n// Persist state.\nexport const saveState = (): void => {\n  const state = store.getState()\n  const pickedState = _.pick(state, [\n    `nodes`,\n    `status`,\n    `componentDataDependencies`,\n    `components`,\n    `jobsV2`,\n    `staticQueryComponents`,\n    `webpackCompilationHash`,\n    `pageDataStats`,\n  ])\n\n  return writeToCache(pickedState)\n}\n\nstore.subscribe(() => {\n  const lastAction = store.getState().lastAction\n  emitter.emit(lastAction.type, lastAction)\n})\n"],"file":"index.js"}