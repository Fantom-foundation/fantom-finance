"use strict";

const {
  default: sift
} = require(`sift`);

const _ = require(`lodash`);

const prepareRegex = require(`../utils/prepare-regex`);

const {
  makeRe
} = require(`micromatch`);

const {
  getValueAt
} = require(`../utils/get-value-at`);

const {
  toDottedFields,
  objectToDottedField,
  liftResolvedFields
} = require(`../db/common/query`); /////////////////////////////////////////////////////////////////////
// Parse filter
/////////////////////////////////////////////////////////////////////


const prepareQueryArgs = (filterFields = {}) => Object.keys(filterFields).reduce((acc, key) => {
  const value = filterFields[key];

  if (_.isPlainObject(value)) {
    acc[key === `elemMatch` ? `$elemMatch` : key] = prepareQueryArgs(value);
  } else {
    switch (key) {
      case `regex`:
        acc[`$regex`] = prepareRegex(value);
        break;

      case `glob`:
        acc[`$regex`] = makeRe(value);
        break;

      default:
        acc[`$${key}`] = value;
    }
  }

  return acc;
}, {});

const getFilters = filters => Object.keys(filters).reduce((acc, key) => acc.push({
  [key]: filters[key]
}) && acc, []); /////////////////////////////////////////////////////////////////////
// Run Sift
/////////////////////////////////////////////////////////////////////


function isEqId(siftArgs) {
  // The `id` of each node is invariably unique. So if a query is doing id $eq(string) it can find only one node tops
  return siftArgs.length > 0 && siftArgs[0].id && Object.keys(siftArgs[0].id).length === 1 && Object.keys(siftArgs[0].id)[0] === `$eq`;
}

function handleFirst(siftArgs, nodes) {
  if (nodes.length === 0) {
    return [];
  }

  const index = _.isEmpty(siftArgs) ? 0 : nodes.findIndex(sift({
    $and: siftArgs
  }));

  if (index !== -1) {
    return [nodes[index]];
  } else {
    return [];
  }
}

function handleMany(siftArgs, nodes, sort, resolvedFields) {
  let result = _.isEmpty(siftArgs) ? nodes : nodes.filter(sift({
    $and: siftArgs
  }));
  if (!result || !result.length) return null; // Sort results.

  if (sort && result.length > 1) {
    // create functions that return the item to compare on
    const dottedFields = objectToDottedField(resolvedFields);
    const dottedFieldKeys = Object.keys(dottedFields);
    const sortFields = sort.fields.map(field => {
      if (dottedFields[field] || dottedFieldKeys.some(key => field.startsWith(key))) {
        return `__gatsby_resolved.${field}`;
      } else {
        return field;
      }
    }).map(field => v => getValueAt(v, field));
    const sortOrder = sort.order.map(order => order.toLowerCase());
    result = _.orderBy(result, sortFields, sortOrder);
  }

  return result;
}
/**
 * Filters a list of nodes using mongodb-like syntax.
 *
 * @param args raw graphql query filter as an object
 * @param nodes The nodes array to run sift over (Optional
 *   will load itself if not present)
 * @param type gqlType. Created in build-node-types
 * @param firstOnly true if you want to return only the first result
 *   found. This will return a collection of size 1. Not a single
 *   element
 * @returns Collection of results. Collection will be limited to size
 *   if `firstOnly` is true
 */


const runSift = args => {
  var _args$queryArgs, _args$queryArgs$filte, _args$queryArgs$filte2;

  const {
    getNode,
    addResolvedNodes,
    getResolvedNode
  } = require(`./nodes`);

  const {
    nodeTypeNames
  } = args;

  if (((_args$queryArgs = args.queryArgs) === null || _args$queryArgs === void 0 ? void 0 : _args$queryArgs.filter) && Object.getOwnPropertyNames(args.queryArgs.filter).length === 1 && typeof ((_args$queryArgs$filte = args.queryArgs.filter) === null || _args$queryArgs$filte === void 0 ? void 0 : (_args$queryArgs$filte2 = _args$queryArgs$filte.id) === null || _args$queryArgs$filte2 === void 0 ? void 0 : _args$queryArgs$filte2.eq) === `string`) {
    // The args have an id.eq which subsumes all other queries
    // Since the id of every node is unique there can only ever be one node found this way. Find it and return it.
    let id = args.queryArgs.filter.id.eq;
    let node = undefined;
    nodeTypeNames.some(typeName => {
      node = getResolvedNode(typeName, id);
      return !!node;
    });

    if (node) {
      return [node];
    }
  }

  let nodes = [];
  nodeTypeNames.forEach(typeName => addResolvedNodes(typeName, nodes));
  return runSiftOnNodes(nodes, args, getNode);
};

exports.runSift = runSift;

const runSiftOnNodes = (nodes, args, getNode) => {
  const {
    queryArgs = {
      filter: {},
      sort: {}
    },
    firstOnly = false,
    resolvedFields = {},
    nodeTypeNames
  } = args;
  let siftFilter = getFilters(liftResolvedFields(toDottedFields(prepareQueryArgs(queryArgs.filter)), resolvedFields)); // If the the query for single node only has a filter for an "id"
  // using "eq" operator, then we'll just grab that ID and return it.

  if (isEqId(siftFilter)) {
    const node = getNode(siftFilter[0].id.$eq);

    if (!node || node.internal && !nodeTypeNames.includes(node.internal.type)) {
      if (firstOnly) return [];
      return null;
    }

    return [node];
  }

  if (firstOnly) {
    return handleFirst(siftFilter, nodes);
  } else {
    return handleMany(siftFilter, nodes, queryArgs.sort, resolvedFields);
  }
};

exports.runSiftOnNodes = runSiftOnNodes;
//# sourceMappingURL=run-sift.js.map