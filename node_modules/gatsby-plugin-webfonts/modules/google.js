"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = google;
exports.isGooglePreconnectEnabled = isGooglePreconnectEnabled;
exports.createRequestUrl = createRequestUrl;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("./utils");

var API_URL = "https://fonts.googleapis.com/css";
var defaultFontOptions = {
  fontDisplay: "swap",
  strategy: "selfHosted" //'base64' || 'cdn'

};

function google(_ref) {
  var cacheFolder = _ref.cacheFolder,
      pathPrefix = _ref.pathPrefix,
      formats = _ref.formats,
      formatAgents = _ref.formatAgents;
  return function (fonts) {
    return Promise.all(fonts.map(
    /*#__PURE__*/
    function () {
      var _ref2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(font) {
        var _createFontOptions, fontDisplay, strategy, requestUrl, cssStrings;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _createFontOptions = createFontOptions(font), fontDisplay = _createFontOptions.fontDisplay, strategy = _createFontOptions.strategy;
                requestUrl = createRequestUrl(font);
                _context2.next = 4;
                return Promise.all(formats.map(
                /*#__PURE__*/
                function () {
                  var _ref3 = (0, _asyncToGenerator2["default"])(
                  /*#__PURE__*/
                  _regenerator["default"].mark(function _callee(format) {
                    var css;
                    return _regenerator["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return (0, _utils.downloadCss)(requestUrl, formatAgents[format]);

                          case 2:
                            css = _context.sent;

                            if (!(strategy === "cdn")) {
                              _context.next = 5;
                              break;
                            }

                            return _context.abrupt("return", css);

                          case 5:
                            return _context.abrupt("return", strategy === "selfHosted" ? (0, _utils.downloadFonts)(css, cacheFolder, pathPrefix) : (0, _utils.encodeFonts)(css));

                          case 6:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x2) {
                    return _ref3.apply(this, arguments);
                  };
                }()));

              case 4:
                cssStrings = _context2.sent;
                return _context2.abrupt("return", (0, _utils.parseCss)(cssStrings.join(""), {
                  fontDisplay: fontDisplay,
                  useMerge: strategy !== "base64"
                }));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()));
  };
}

function isGooglePreconnectEnabled(options) {
  var usePreconnect = options.usePreconnect;
  var fonts = options.fonts.google;
  if (!usePreconnect) return false;
  if (!fonts || fonts.length === 0) return false;
  return fonts.findIndex(function (font) {
    var _createFontOptions2 = createFontOptions(font),
        strategy = _createFontOptions2.strategy;

    return strategy === "cdn";
  }) > -1;
}

function createRequestUrl(font) {
  if (!font.family) return null;
  var requestUrl = API_URL + "?family=" + font.family.replace(/ /g, "+");

  if (font.variants) {
    requestUrl += ":" + font.variants.join(",");
  }

  if (font.subsets) {
    requestUrl += "&subset=" + font.subsets.join(",");
  }

  if (font.text && font.text.length > 0) {
    requestUrl += "&text=" + encodeURIComponent(font.text);
  }

  if (font.fontDisplay) {
    requestUrl += "&display=" + encodeURIComponent(font.fontDisplay);
  }

  return requestUrl;
}

function createFontOptions(options) {
  return (0, _extends2["default"])({}, defaultFontOptions, {}, options);
}