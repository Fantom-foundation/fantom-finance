"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.parseCss = parseCss;
exports.downloadCss = downloadCss;
exports.downloadFont = downloadFont;
exports.downloadFonts = downloadFonts;
exports.encodeFonts = encodeFonts;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _url = _interopRequireDefault(require("url"));

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _axios = _interopRequireDefault(require("axios"));

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssJs = _interopRequireDefault(require("postcss-js"));

function fontFaceReducer(fontDisplay, useMerge) {
  if (fontDisplay === void 0) {
    fontDisplay = "swap";
  }

  return function (acc, obj) {
    if (useMerge) {
      var srcs = obj.src.split(",");
      var index = acc.findIndex(function (element) {
        return element.src.split(",")[0] === srcs[0];
      });

      if (index > -1) {
        // we don't know how many 'local'-names the font might have, so we
        // just use the last entry, which should be the 'url' entry of the
        // requested type.
        acc[index].src = acc[index].src + ", " + srcs[srcs.length - 1];
        return acc;
      }
    }

    obj.fontDisplay = fontDisplay;
    acc.push(obj);
    return acc;
  };
}

function parseCss(_x, _x2) {
  return _parseCss.apply(this, arguments);
}

function _parseCss() {
  _parseCss = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(cssString, _ref) {
    var _ref$fontDisplay, fontDisplay, useMerge, root, cssObject, reducer, _ref2, css;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref$fontDisplay = _ref.fontDisplay, fontDisplay = _ref$fontDisplay === void 0 ? "swap" : _ref$fontDisplay, useMerge = _ref.useMerge;
            root = _postcss["default"].parse(cssString);
            cssObject = _postcssJs["default"].objectify(root);

            if (cssObject["@font-face"]) {
              reducer = fontFaceReducer(fontDisplay, useMerge);
              cssObject["@font-face"] = Array.isArray(cssObject["@font-face"]) ? cssObject["@font-face"].reduce(reducer, []) : reducer([], cssObject["@font-face"]);
            }

            _context.next = 6;
            return (0, _postcss["default"])().process(cssObject, {
              parser: _postcssJs["default"],
              from: undefined
            });

          case 6:
            _ref2 = _context.sent;
            css = _ref2.css;
            return _context.abrupt("return", css);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseCss.apply(this, arguments);
}

function downloadCss(_x3, _x4, _x5) {
  return _downloadCss.apply(this, arguments);
}

function _downloadCss() {
  _downloadCss = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(url, userAgent, headers) {
    var response;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (headers === void 0) {
              headers = {};
            }

            _context2.next = 3;
            return _axios["default"].get(url, {
              headers: (0, _extends2["default"])({
                accept: "text/css,*/*;q=0.1",
                "User-Agent": userAgent
              }, headers)
            });

          case 3:
            response = _context2.sent;
            return _context2.abrupt("return", response.data);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _downloadCss.apply(this, arguments);
}

function downloadFont(_x6, _x7) {
  return _downloadFont.apply(this, arguments);
}

function _downloadFont() {
  _downloadFont = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(url, headers) {
    var response;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (headers === void 0) {
              headers = {};
            }

            _context3.next = 3;
            return _axios["default"].get(url, {
              responseType: "arraybuffer",
              headers: headers
            });

          case 3:
            response = _context3.sent;
            return _context3.abrupt("return", response.data);

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _downloadFont.apply(this, arguments);
}

function downloadFonts(_x8, _x9, _x10) {
  return _downloadFonts.apply(this, arguments);
}

function _downloadFonts() {
  _downloadFonts = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee5(css, downloadFolder, pathPrefix) {
    var regex, fontUrls, fontSrcs;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            regex = /url\((.+?)\)/gi;
            fontUrls = css.match(regex).map(function (urlString) {
              return urlString.replace(regex, "$1");
            });
            _context5.next = 4;
            return Promise.all(fontUrls.map(
            /*#__PURE__*/
            function () {
              var _ref3 = (0, _asyncToGenerator2["default"])(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee4(fontUrl) {
                var _url$parse, pathname, filePath, font;

                return _regenerator["default"].wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _url$parse = _url["default"].parse(fontUrl), pathname = _url$parse.pathname;
                        filePath = _path["default"].join(downloadFolder, pathname);
                        _context4.next = 4;
                        return downloadFont(fontUrl);

                      case 4:
                        font = _context4.sent;
                        _context4.next = 7;
                        return _fsExtra["default"].outputFile(filePath, font);

                      case 7:
                        return _context4.abrupt("return", (pathPrefix || "") + "/static/webfonts/" + pathname);

                      case 8:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              }));

              return function (_x12) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 4:
            fontSrcs = _context5.sent;
            fontSrcs.forEach(function (src, index) {
              return css = css.replace(fontUrls[index], src);
            });
            return _context5.abrupt("return", css);

          case 7:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _downloadFonts.apply(this, arguments);
}

function encodeFonts(_x11) {
  return _encodeFonts.apply(this, arguments);
}

function _encodeFonts() {
  _encodeFonts = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee7(css) {
    var regex, fontUrls, fontsEncoded;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            regex = /url\((.+?)\)/gi;
            fontUrls = css.match(regex).map(function (urlString) {
              return urlString.replace(regex, "$1");
            });
            _context7.next = 4;
            return Promise.all(fontUrls.map(
            /*#__PURE__*/
            function () {
              var _ref4 = (0, _asyncToGenerator2["default"])(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee6(fontUrl) {
                var font, format;
                return _regenerator["default"].wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.next = 2;
                        return downloadFont(fontUrl);

                      case 2:
                        font = _context6.sent;
                        format = _path["default"].extname(fontUrl).substr(1);
                        return _context6.abrupt("return", "\"data:application/x-font-" + format + ";base64," + Buffer.from(font, "binary").toString("base64") + "\"");

                      case 5:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6);
              }));

              return function (_x13) {
                return _ref4.apply(this, arguments);
              };
            }()));

          case 4:
            fontsEncoded = _context7.sent;
            fontsEncoded.forEach(function (font, index) {
              return css = css.replace(fontUrls[index], font);
            });
            return _context7.abrupt("return", css);

          case 7:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _encodeFonts.apply(this, arguments);
}