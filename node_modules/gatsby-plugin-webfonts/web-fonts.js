"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = webFonts;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _postcss = _interopRequireDefault(require("postcss"));

var _cssnano = _interopRequireDefault(require("cssnano"));

var _google = _interopRequireDefault(require("./modules/google"));

function webFonts(_x) {
  return _webFonts.apply(this, arguments);
}

function _webFonts() {
  _webFonts = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(options) {
    var modules, merge, cssStrings, css, filePath;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            modules = {
              google: (0, _google["default"])(options)
            };

            merge =
            /*#__PURE__*/
            function () {
              var _ref = (0, _asyncToGenerator2["default"])(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee(css) {
                var plugins, _ref2, minifiedCss;

                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        plugins = options.useMinify ? [(0, _cssnano["default"])({
                          preset: "default"
                        })] : [];
                        _context.next = 3;
                        return (0, _postcss["default"])(plugins).process(css, {
                          from: undefined
                        });

                      case 3:
                        _ref2 = _context.sent;
                        minifiedCss = _ref2.css;
                        return _context.abrupt("return", minifiedCss);

                      case 6:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function merge(_x2) {
                return _ref.apply(this, arguments);
              };
            }();

            _context2.next = 4;
            return Promise.all(Object.keys(options.fonts).map(function (key) {
              return modules[key](options.fonts[key]);
            }));

          case 4:
            cssStrings = _context2.sent;
            _context2.next = 7;
            return merge(cssStrings.join(""));

          case 7:
            css = _context2.sent;
            filePath = _path["default"].join(options.cacheFolder, "webfonts.css");
            _context2.next = 11;
            return _fsExtra["default"].outputFile(filePath, css);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _webFonts.apply(this, arguments);
}